import numpy as npimport backprop_dataimport backprop_networkimport matplotlib.pyplot as pltdef plot_epoch_lr(x, y_lst, yname, lrs):    plt.xlabel("Epochs")    plt.ylabel(yname.title())    for lrate, y in zip(lrs, y_lst):        plt.plot(x, y, label=f"Rate {lrate}")    plt.legend()    plt.savefig(f"q2b_{yname}.pdf")    plt.show()def q1a(train_data, test_data):    net = backprop_network.Network([784, 40, 10])    net.SGD(training_data=train_data,            epochs=30, mini_batch_size=10,            learning_rate=0.1, test_data=test_data)def q1b(train_data, test_data):    num_epochs = 30    epochs = np.arange(num_epochs)    learning_rates = [0.001, 0.01, 0.1, 1, 10, 100]    train_loss_lst = [0 for _ in epochs]    train_accuracy_lst = [0 for _ in epochs]    test_accuracy_lst = [0 for _ in epochs]    for i, lr in enumerate(learning_rates):        print(f"Learning Rate {lr}")        net = backprop_network.Network([784, 40, 10])        train_loss_lst[i], train_accuracy_lst[i], test_accuracy_lst[i] = net.SGD(training_data=train_data,                                                                                 epochs=num_epochs, mini_batch_size=10,                                                                                 learning_rate=lr, test_data=test_data,                                                                                 calc_train_results=True)    plot_epoch_lr(epochs, train_loss_lst, "Training Loss", learning_rates)    plot_epoch_lr(epochs, train_accuracy_lst, "Training Accuracy", learning_rates)    plot_epoch_lr(epochs, test_accuracy_lst, "Test Accuracy", learning_rates)def q1c():    num_epochs = 30    learning_rate = 0.1    train_data, test_data = backprop_data.load(train_size=50000, test_size=10000)    net = backprop_network.Network([784, 40, 10])    epochs = np.arange(num_epochs)    _, _, test_accuracy_lst = net.SGD(training_data=train_data, epochs=num_epochs, mini_batch_size=10,                                      learning_rate=learning_rate, test_data=test_data)    plot_epoch_lr(epochs, [test_accuracy_lst], "Test Accuracy", [learning_rate])def cross_validate_num_neurons(learning_rate, num_epochs):    print("Cross validating number of neurons")    num_neurons = np.arange(10, 220, 20)    result = np.zeros(num_neurons.shape[0])    for i, n in enumerate(num_neurons):        print(f"Checking number of neurons {n}")        train_data, test_data = backprop_data.load(train_size=5000, test_size=1000)        net = backprop_network.Network([784, n, 10])        _, _, test_accuracy_lst = net.SGD(training_data=train_data, epochs=num_epochs, mini_batch_size=20,                                          learning_rate=learning_rate, test_data=test_data)        result[i] = test_accuracy_lst[-1]    return num_neurons[np.argmax(result)]def cross_validate_learning_rate(num_neurons, num_epochs):    print("Cross validating learning rate")    num_lrs = 15    result = np.zeros(num_lrs)    lrs = np.linspace(0.01, 0.3, num=num_lrs)    for i, lr in enumerate(lrs):        print(f"Checking learning rate {lr}")        train_data, test_data = backprop_data.load(train_size=5000, test_size=1000)        net = backprop_network.Network([784, num_neurons, 10])        _, _, test_accuracy_lst = net.SGD(training_data=train_data, epochs=num_epochs, mini_batch_size=20,                                          learning_rate=lr, test_data=test_data)        result[i] = test_accuracy_lst[-1]    return lrs[np.argmax(result)]def q1d():    num_epochs = 30    num_neurons = cross_validate_num_neurons(0.1, 10)    learning_rate = cross_validate_learning_rate(num_neurons, 10)    print(f"{num_neurons} neurons and {learning_rate} learning rate chosen after cross validation")    train_data, test_data = backprop_data.load(train_size=50000, test_size=10000)    net = backprop_network.Network([784, num_neurons, 10])    epochs = np.arange(num_epochs)    _, _, test_accuracy_lst = net.SGD(training_data=train_data, epochs=num_epochs, mini_batch_size=20,                                      learning_rate=learning_rate, test_data=test_data)    plot_epoch_lr(epochs, [test_accuracy_lst], "Test Accuracy", [learning_rate])if __name__ == '__main__':    training_data, testing_data = backprop_data.load(train_size=10000, test_size=5000)    q1a(training_data, testing_data)    q1b(training_data, testing_data)    q1c()    q1d()